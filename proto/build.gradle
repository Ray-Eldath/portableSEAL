buildscript {
    ext {
        protobufVersion = '3.11.1'
        krotoPlusVersion = '0.6.0-SNAPSHOT'
        coroutinesVersion = '1.3.3'
        grpcVersion = '1.25.0'
        grpcKotlinVersion = '0.1.2'

        selfVersion = '1.0-SNAPSHOT'
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
    id 'com.google.protobuf' version '0.8.10'
    id 'idea'
}

group 'ray.eldath'
version selfVersion

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local' }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"

    compileOnly "javax.annotation:javax.annotation-api:1.2"

    implementation "com.github.marcoferrer.krotoplus:kroto-plus-coroutines:$krotoPlusVersion"
//    implementation "com.google.protobuf:protobuf-java:$protobufVersion"
//    implementation "com.google.api.grpc:proto-google-common-protos:1.17.0"
    implementation "io.grpc:grpc-protobuf:$grpcVersion"
//    implementation "io.grpc:grpc-okhttp:$grpcVersion"
    implementation "io.grpc:grpc-stub:$grpcVersion"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:$protobufVersion" }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
        }

        grpckotlin {
            artifact = "io.rouz:grpc-kotlin-gen:$grpcKotlinVersion:jdk8@jar"
        }

//        kroto {
//            artifact = "com.github.marcoferrer.krotoplus:protoc-gen-kroto-plus:$krotoPlusVersion"
//        }

        coroutines {
            artifact = "com.github.marcoferrer.krotoplus:protoc-gen-grpc-coroutines:$krotoPlusVersion"
        }
    }

    generateProtoTasks {
        def krotoConfig = file("krotoplus.asciipb")

        all().each { task ->
            task.inputs.files krotoConfig

            task.plugins {
                grpc {}
                grpckotlin {}
//                kroto {
//                    outputSubDir = "java"
//                    option "ConfigPath=${file(System.getProperty("user.dir")).toPath().toAbsolutePath().relativize(krotoConfig.toPath().toAbsolutePath()).toString()}"
//                }
                coroutines {}
            }
        }
    }
}

[compileKotlin, compileTestKotlin].forEach { it.kotlinOptions.jvmTarget = "11" }